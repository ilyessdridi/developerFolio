{"ast":null,"code":"// // import React, {useState, useEffect, useContext, Suspense, lazy} from \"react\";\n// // import \"./Project.scss\";\n// // import Button from \"../../components/button/Button\";\n// // import {openSource, socialMediaLinks} from \"../../portfolio\";\n// // import StyleContext from \"../../contexts/StyleContext\";\n// // import Loading from \"../../containers/loading/Loading\";\n// // export default function Projects() {\n// //   const GithubRepoCard = lazy(() =>\n// //     import(\"../../components/githubRepoCard/GithubRepoCard\")\n// //   );\n// //   const FailedLoading = () => null;\n// //   const renderLoader = () => <Loading />;\n// //   const [repo, setrepo] = useState([]);\n// //   // todo: remove useContex because is not supported\n// //   const {isDark} = useContext(StyleContext);\n\n// //   useEffect(() => {\n// //     const getRepoData = () => {\n// //       fetch(\"/profile.json\")\n// //         .then(result => {\n// //           if (result.ok) {\n// //             return result.json();\n// //           }\n// //           throw result;\n// //         })\n// //         .then(response => {\n// //           setrepoFunction(response.data.user.pinnedItems.edges);\n// //         })\n// //         .catch(function (error) {\n// //           console.error(\n// //             `${error} (because of this error, nothing is shown in place of Projects section. Also check if Projects section has been configured)`\n// //           );\n// //           setrepoFunction(\"Error\");\n// //         });\n// //     };\n// //     getRepoData();\n// //   }, []);\n\n// //   function setrepoFunction(array) {\n// //     setrepo(array);\n// //   }\n// //   if (\n// //     !(typeof repo === \"string\" || repo instanceof String) &&\n// //     openSource.display\n// //   ) {\n// //     return (\n// //       <Suspense fallback={renderLoader()}>\n// //         <div className=\"main\" id=\"opensource\">\n// //           <h1 className=\"project-title\">Open Source Projects</h1>\n// //           <div className=\"repo-cards-div-main\">\n// //             {repo.map((v, i) => {\n// //               if (!v) {\n// //                 console.error(\n// //                   `Github Object for repository number : ${i} is undefined`\n// //                 );\n// //               }\n// //               return (\n// //                 <GithubRepoCard repo={v} key={v.node.id} isDark={isDark} />\n// //               );\n// //             })}\n// //           </div>\n// //           <Button\n// //             text={\"More Projects\"}\n// //             className=\"project-button\"\n// //             href={socialMediaLinks.github}\n// //             newTab={true}\n// //           />\n// //         </div>\n// //       </Suspense>\n// //     );\n// //   } else {\n// //     return <FailedLoading />;\n// //   }\n// // }\n\n// import React, {useState, useEffect, useContext, Suspense, lazy} from \"react\";\n// import \"./Project.scss\";\n// import Button from \"../../components/button/Button\";\n// import {openSource, socialMediaLinks} from \"../../portfolio\";\n// import StyleContext from \"../../contexts/StyleContext\";\n// import Loading from \"../../containers/loading/Loading\";\n\n// export default function Projects() {\n//   const GithubRepoCard = lazy(() =>\n//     import(\"../../components/githubRepoCard/GithubRepoCard\")\n//   );\n//   const FailedLoading = () => null;\n//   const renderLoader = () => <Loading />;\n//   const [repo, setrepo] = useState([]);\n//   const {isDark} = useContext(StyleContext);\n\n//   // Modal state for demo video\n//   const [showDemo, setShowDemo] = useState(false);\n//   const [demoVideo, setDemoVideo] = useState(null);\n\n//   useEffect(() => {\n//     const getRepoData = () => {\n//       fetch(\"/profile.json\")\n//         .then(result => {\n//           if (result.ok) {\n//             return result.json();\n//           }\n//           throw result;\n//         })\n//         .then(response => {\n//           setrepoFunction(response.data.user.pinnedItems.edges);\n//         })\n//         .catch(function (error) {\n//           console.error(\n//             `${error} (because of this error, nothing is shown in place of Projects section. Also check if Projects section has been configured)`\n//           );\n//           setrepoFunction(\"Error\");\n//         });\n//     };\n//     getRepoData();\n//   }, []);\n\n//   function setrepoFunction(array) {\n//     setrepo(array);\n//   }\n\n//   // Handler to open demo modal\n//   function handleViewDemo(videoUrl) {\n//     setDemoVideo(videoUrl);\n//     setShowDemo(true);\n//   }\n\n//   if (\n//     !(typeof repo === \"string\" || repo instanceof String) &&\n//     openSource.display\n//   ) {\n//     return (\n//       <Suspense fallback={renderLoader()}>\n//         <div className=\"main\" id=\"opensource\">\n//           <h1 className=\"project-title\">Open Source Projects</h1>\n//           <div className=\"repo-cards-div-main\">\n//             {repo.map((v, i) => {\n//               if (!v) {\n//                 console.error(\n//                   `Github Object for repository number : ${i} is undefined`\n//                 );\n//               }\n//               // Pass handleViewDemo to GithubRepoCard\n//               return (\n//                 <GithubRepoCard\n//                   repo={v}\n//                   key={v.node.id}\n//                   isDark={isDark}\n//                   onViewDemo={handleViewDemo}\n//                 />\n//               );\n//             })}\n//           </div>\n//           <Button\n//             text={\"More Projects\"}\n//             className=\"project-button\"\n//             href={socialMediaLinks.github}\n//             newTab={true}\n//           />\n//           {/* Demo Video Modal */}\n//           {showDemo && demoVideo && (\n//             <div\n//               className=\"demo-modal\"\n//               style={{\n//                 position: \"fixed\",\n//                 top: 0,\n//                 left: 0,\n//                 right: 0,\n//                 bottom: 0,\n//                 background: \"rgba(0,0,0,0.7)\",\n//                 display: \"flex\",\n//                 alignItems: \"center\",\n//                 justifyContent: \"center\",\n//                 zIndex: 1000\n//               }}\n//             >\n//               <div\n//                 style={{\n//                   background: \"#fff\",\n//                   padding: 20,\n//                   borderRadius: 8,\n//                   maxWidth: 600,\n//                   width: \"90%\"\n//                 }}\n//               >\n//                 <video src={demoVideo} controls style={{width: \"100%\"}} />\n//                 <button\n//                   onClick={() => setShowDemo(false)}\n//                   style={{marginTop: 10}}\n//                 >\n//                   Close\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n//       </Suspense>\n//     );\n//   } else {\n//     return <FailedLoading />;\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:/Users/ilyess/Desktop/portfolio/developerFolio/src/containers/projects/Projects.js"],"sourcesContent":["// // import React, {useState, useEffect, useContext, Suspense, lazy} from \"react\";\n// // import \"./Project.scss\";\n// // import Button from \"../../components/button/Button\";\n// // import {openSource, socialMediaLinks} from \"../../portfolio\";\n// // import StyleContext from \"../../contexts/StyleContext\";\n// // import Loading from \"../../containers/loading/Loading\";\n// // export default function Projects() {\n// //   const GithubRepoCard = lazy(() =>\n// //     import(\"../../components/githubRepoCard/GithubRepoCard\")\n// //   );\n// //   const FailedLoading = () => null;\n// //   const renderLoader = () => <Loading />;\n// //   const [repo, setrepo] = useState([]);\n// //   // todo: remove useContex because is not supported\n// //   const {isDark} = useContext(StyleContext);\n\n// //   useEffect(() => {\n// //     const getRepoData = () => {\n// //       fetch(\"/profile.json\")\n// //         .then(result => {\n// //           if (result.ok) {\n// //             return result.json();\n// //           }\n// //           throw result;\n// //         })\n// //         .then(response => {\n// //           setrepoFunction(response.data.user.pinnedItems.edges);\n// //         })\n// //         .catch(function (error) {\n// //           console.error(\n// //             `${error} (because of this error, nothing is shown in place of Projects section. Also check if Projects section has been configured)`\n// //           );\n// //           setrepoFunction(\"Error\");\n// //         });\n// //     };\n// //     getRepoData();\n// //   }, []);\n\n// //   function setrepoFunction(array) {\n// //     setrepo(array);\n// //   }\n// //   if (\n// //     !(typeof repo === \"string\" || repo instanceof String) &&\n// //     openSource.display\n// //   ) {\n// //     return (\n// //       <Suspense fallback={renderLoader()}>\n// //         <div className=\"main\" id=\"opensource\">\n// //           <h1 className=\"project-title\">Open Source Projects</h1>\n// //           <div className=\"repo-cards-div-main\">\n// //             {repo.map((v, i) => {\n// //               if (!v) {\n// //                 console.error(\n// //                   `Github Object for repository number : ${i} is undefined`\n// //                 );\n// //               }\n// //               return (\n// //                 <GithubRepoCard repo={v} key={v.node.id} isDark={isDark} />\n// //               );\n// //             })}\n// //           </div>\n// //           <Button\n// //             text={\"More Projects\"}\n// //             className=\"project-button\"\n// //             href={socialMediaLinks.github}\n// //             newTab={true}\n// //           />\n// //         </div>\n// //       </Suspense>\n// //     );\n// //   } else {\n// //     return <FailedLoading />;\n// //   }\n// // }\n\n// import React, {useState, useEffect, useContext, Suspense, lazy} from \"react\";\n// import \"./Project.scss\";\n// import Button from \"../../components/button/Button\";\n// import {openSource, socialMediaLinks} from \"../../portfolio\";\n// import StyleContext from \"../../contexts/StyleContext\";\n// import Loading from \"../../containers/loading/Loading\";\n\n// export default function Projects() {\n//   const GithubRepoCard = lazy(() =>\n//     import(\"../../components/githubRepoCard/GithubRepoCard\")\n//   );\n//   const FailedLoading = () => null;\n//   const renderLoader = () => <Loading />;\n//   const [repo, setrepo] = useState([]);\n//   const {isDark} = useContext(StyleContext);\n\n//   // Modal state for demo video\n//   const [showDemo, setShowDemo] = useState(false);\n//   const [demoVideo, setDemoVideo] = useState(null);\n\n//   useEffect(() => {\n//     const getRepoData = () => {\n//       fetch(\"/profile.json\")\n//         .then(result => {\n//           if (result.ok) {\n//             return result.json();\n//           }\n//           throw result;\n//         })\n//         .then(response => {\n//           setrepoFunction(response.data.user.pinnedItems.edges);\n//         })\n//         .catch(function (error) {\n//           console.error(\n//             `${error} (because of this error, nothing is shown in place of Projects section. Also check if Projects section has been configured)`\n//           );\n//           setrepoFunction(\"Error\");\n//         });\n//     };\n//     getRepoData();\n//   }, []);\n\n//   function setrepoFunction(array) {\n//     setrepo(array);\n//   }\n\n//   // Handler to open demo modal\n//   function handleViewDemo(videoUrl) {\n//     setDemoVideo(videoUrl);\n//     setShowDemo(true);\n//   }\n\n//   if (\n//     !(typeof repo === \"string\" || repo instanceof String) &&\n//     openSource.display\n//   ) {\n//     return (\n//       <Suspense fallback={renderLoader()}>\n//         <div className=\"main\" id=\"opensource\">\n//           <h1 className=\"project-title\">Open Source Projects</h1>\n//           <div className=\"repo-cards-div-main\">\n//             {repo.map((v, i) => {\n//               if (!v) {\n//                 console.error(\n//                   `Github Object for repository number : ${i} is undefined`\n//                 );\n//               }\n//               // Pass handleViewDemo to GithubRepoCard\n//               return (\n//                 <GithubRepoCard\n//                   repo={v}\n//                   key={v.node.id}\n//                   isDark={isDark}\n//                   onViewDemo={handleViewDemo}\n//                 />\n//               );\n//             })}\n//           </div>\n//           <Button\n//             text={\"More Projects\"}\n//             className=\"project-button\"\n//             href={socialMediaLinks.github}\n//             newTab={true}\n//           />\n//           {/* Demo Video Modal */}\n//           {showDemo && demoVideo && (\n//             <div\n//               className=\"demo-modal\"\n//               style={{\n//                 position: \"fixed\",\n//                 top: 0,\n//                 left: 0,\n//                 right: 0,\n//                 bottom: 0,\n//                 background: \"rgba(0,0,0,0.7)\",\n//                 display: \"flex\",\n//                 alignItems: \"center\",\n//                 justifyContent: \"center\",\n//                 zIndex: 1000\n//               }}\n//             >\n//               <div\n//                 style={{\n//                   background: \"#fff\",\n//                   padding: 20,\n//                   borderRadius: 8,\n//                   maxWidth: 600,\n//                   width: \"90%\"\n//                 }}\n//               >\n//                 <video src={demoVideo} controls style={{width: \"100%\"}} />\n//                 <button\n//                   onClick={() => setShowDemo(false)}\n//                   style={{marginTop: 10}}\n//                 >\n//                   Close\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n//       </Suspense>\n//     );\n//   } else {\n//     return <FailedLoading />;\n//   }\n// }"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}